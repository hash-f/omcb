{"id":"node_modules/react-use-websocket/dist/lib/manage-subscribers.js","dependencies":[{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/manage-subscribers.js.map","includedInParent":true,"mtime":1732535186175},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/src/lib/manage-subscribers.ts","includedInParent":true,"mtime":1732535186179},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/package.json","includedInParent":true,"mtime":1732535186185},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1732535186173}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resetSubscribers = exports.removeSubscriber = exports.addSubscriber = exports.hasSubscribers = exports.getSubscribers = void 0;\nvar subscribers = {};\nvar EMPTY_LIST = [];\nvar getSubscribers = function (url) {\n    if ((0, exports.hasSubscribers)(url)) {\n        return Array.from(subscribers[url]);\n    }\n    return EMPTY_LIST;\n};\nexports.getSubscribers = getSubscribers;\nvar hasSubscribers = function (url) {\n    var _a;\n    return ((_a = subscribers[url]) === null || _a === void 0 ? void 0 : _a.size) > 0;\n};\nexports.hasSubscribers = hasSubscribers;\nvar addSubscriber = function (url, subscriber) {\n    subscribers[url] = subscribers[url] || new Set();\n    subscribers[url].add(subscriber);\n};\nexports.addSubscriber = addSubscriber;\nvar removeSubscriber = function (url, subscriber) {\n    subscribers[url].delete(subscriber);\n};\nexports.removeSubscriber = removeSubscriber;\nvar resetSubscribers = function (url) {\n    if (url && subscribers.hasOwnProperty(url)) {\n        delete subscribers[url];\n    }\n    else {\n        for (var url_1 in subscribers) {\n            if (subscribers.hasOwnProperty(url_1)) {\n                delete subscribers[url_1];\n            }\n        }\n    }\n};\nexports.resetSubscribers = resetSubscribers;\n"},"sourceMaps":{"js":{"version":3,"file":"manage-subscribers.js","sourceRoot":"","sources":["../../src/lib/manage-subscribers.ts"],"names":[],"mappings":";;;AAMA,IAAM,WAAW,GAAgB,EAAE,CAAC;AACpC,IAAM,UAAU,GAAiB,EAAE,CAAC;AAE7B,IAAM,cAAc,GAAG,UAAC,GAAW;IACtC,IAAI,IAAA,sBAAc,EAAC,GAAG,CAAC,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,CAAC;IACD,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC;AALW,QAAA,cAAc,kBAKzB;AAEK,IAAM,cAAc,GAAG,UAAC,GAAW;;IACtC,OAAO,CAAA,MAAA,WAAW,CAAC,GAAG,CAAC,0CAAE,IAAI,IAAG,CAAC,CAAC;AACtC,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEK,IAAM,aAAa,GAAG,UAAC,GAAW,EAAE,UAAsB;IAC7D,WAAW,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,EAAc,CAAC;IAC7D,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC,CAAC;AAHW,QAAA,aAAa,iBAGxB;AAEK,IAAM,gBAAgB,GAAG,UAAC,GAAW,EAAE,UAAsB;IAChE,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACxC,CAAC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B;AAEK,IAAM,gBAAgB,GAAG,UAAC,GAAY;IACzC,IAAI,GAAG,IAAI,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;QACzC,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;SAAM,CAAC;QACJ,KAAK,IAAI,KAAG,IAAI,WAAW,EAAC,CAAC;YACzB,IAAI,WAAW,CAAC,cAAc,CAAC,KAAG,CAAC,EAAC,CAAC;gBACjC,OAAO,WAAW,CAAC,KAAG,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC;IACL,CAAC;AACL,CAAC,CAAA;AAVY,QAAA,gBAAgB,oBAU5B","sourcesContent":["import { Subscriber } from './types';\n\nexport type Subscribers = {\n    [url: string]: Set<Subscriber>,\n}\n  \nconst subscribers: Subscribers = {};\nconst EMPTY_LIST: Subscriber[] = [];\n\nexport const getSubscribers = (url: string): Subscriber[] => {\n    if (hasSubscribers(url)) {\n        return Array.from(subscribers[url]);\n    }\n    return EMPTY_LIST;\n};\n\nexport const hasSubscribers = (url: string): boolean => {\n    return subscribers[url]?.size > 0;\n};\n\nexport const addSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url] = subscribers[url] || new Set<Subscriber>();\n    subscribers[url].add(subscriber);\n};\n\nexport const removeSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url].delete(subscriber);\n};\n\nexport const resetSubscribers = (url?: string): void => {\n    if (url && subscribers.hasOwnProperty(url)) {\n        delete subscribers[url];\n    } else {\n        for (let url in subscribers){\n            if (subscribers.hasOwnProperty(url)){\n                delete subscribers[url];\n            }\n        }\n    }\n}\n"]}},"error":null,"hash":"700a3b4399099cf5ccf3a1cc19632899","cacheData":{"env":{}}}