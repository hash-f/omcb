{"id":"node_modules/react-use-websocket/dist/lib/heartbeat.js","dependencies":[{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/heartbeat.js.map","includedInParent":true,"mtime":1732535186174},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/src/lib/heartbeat.ts","includedInParent":true,"mtime":1732535186179},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/package.json","includedInParent":true,"mtime":1732535186185},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1732535186173},{"name":"./constants","loc":{"line":4,"column":26,"index":134},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/heartbeat.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/constants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.heartbeat = heartbeat;\nvar constants_1 = require(\"./constants\");\nfunction heartbeat(ws, lastMessageTime, options) {\n    var _a = options || {}, _b = _a.interval, interval = _b === void 0 ? constants_1.DEFAULT_HEARTBEAT.interval : _b, _c = _a.timeout, timeout = _c === void 0 ? constants_1.DEFAULT_HEARTBEAT.timeout : _c, _d = _a.message, message = _d === void 0 ? constants_1.DEFAULT_HEARTBEAT.message : _d;\n    var heartbeatInterval = setInterval(function () {\n        if (lastMessageTime.current + timeout <= Date.now()) {\n            console.warn(\"Heartbeat timed out, closing connection, last message was seen \".concat(Date.now() - lastMessageTime.current, \"ms ago\"));\n            ws.close();\n        }\n        else {\n            if (lastMessageTime.current + interval <= Date.now()) {\n                try {\n                    if (typeof message === 'function') {\n                        ws.send(message());\n                    }\n                    else {\n                        ws.send(message);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Heartbeat failed, closing connection\", err instanceof Error ? err.message : err);\n                    ws.close();\n                }\n            }\n        }\n    }, interval);\n    ws.addEventListener(\"close\", function () {\n        clearInterval(heartbeatInterval);\n    });\n    return function () { };\n}\n"},"sourceMaps":{"js":{"version":3,"file":"heartbeat.js","sourceRoot":"","sources":["../../src/lib/heartbeat.ts"],"names":[],"mappings":";;AAIA,8BAkCC;AArCD,yCAAgD;AAGhD,SAAgB,SAAS,CAAC,EAAa,EAAE,eAAyC,EAAE,OAA0B;IACtG,IAAA,KAIF,OAAO,IAAI,EAAE,EAHf,gBAAqC,EAArC,QAAQ,mBAAG,6BAAiB,CAAC,QAAQ,KAAA,EACrC,eAAmC,EAAnC,OAAO,mBAAG,6BAAiB,CAAC,OAAO,KAAA,EACnC,eAAmC,EAAnC,OAAO,mBAAG,6BAAiB,CAAC,OAAO,KACpB,CAAC;IAElB,IAAM,iBAAiB,GAAG,WAAW,CAAC;QACpC,IAAI,eAAe,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YACpD,OAAO,CAAC,IAAI,CAAC,yEAAkE,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,OAAO,WAAQ,CAAC,CAAC;YAC7H,EAAE,CAAC,KAAK,EAAE,CAAC;QACb,CAAC;aAAM,CAAC;YACN,IAAI,eAAe,CAAC,OAAO,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBACrD,IAAI,CAAC;oBACH,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC;wBAClC,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;oBACrB,CAAC;yBAAM,CAAC;wBACN,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACnB,CAAC;gBACH,CAAC;gBAAC,OAAO,GAAY,EAAE,CAAC;oBACtB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChG,EAAE,CAAC,KAAK,EAAE,CAAC;gBACb,CAAC;YAEH,CAAC;QACH,CAAC;IACH,CAAC,EAAE,QAAQ,CAAC,CAAC;IAEb,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE;QAC3B,aAAa,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAGH,OAAO,cAAQ,CAAC,CAAC;AACnB,CAAC","sourcesContent":["import { MutableRefObject } from \"react\";\nimport { DEFAULT_HEARTBEAT } from \"./constants\";\nimport { HeartbeatOptions } from \"./types\";\n\nexport function heartbeat(ws: WebSocket, lastMessageTime: MutableRefObject<number>, options?: HeartbeatOptions): () => void {\n  const {\n    interval = DEFAULT_HEARTBEAT.interval,\n    timeout = DEFAULT_HEARTBEAT.timeout,\n    message = DEFAULT_HEARTBEAT.message,\n  } = options || {};\n\n  const heartbeatInterval = setInterval(() => {\n    if (lastMessageTime.current + timeout <= Date.now()) {\n      console.warn(`Heartbeat timed out, closing connection, last message was seen ${Date.now() - lastMessageTime.current}ms ago`);\n      ws.close();\n    } else {\n      if (lastMessageTime.current + interval <= Date.now()) {\n        try {\n          if (typeof message === 'function') {\n            ws.send(message());\n          } else {\n            ws.send(message);\n          }\n        } catch (err: unknown) {\n          console.error(`Heartbeat failed, closing connection`, err instanceof Error ? err.message : err);\n          ws.close();\n        }\n\n      }\n    }\n  }, interval);\n\n  ws.addEventListener(\"close\", () => {\n    clearInterval(heartbeatInterval);\n  });\n\n\n  return () => { };\n}\n"]}},"error":null,"hash":"48ae5298caeab16ec4072ee6bf0469e6","cacheData":{"env":{}}}