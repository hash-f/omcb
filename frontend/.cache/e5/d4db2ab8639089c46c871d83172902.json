{"id":"node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","dependencies":[{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js.map","includedInParent":true,"mtime":1732535186173},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts","includedInParent":true,"mtime":1732535186177},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/package.json","includedInParent":true,"mtime":1732535186185},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1732535186173},{"name":"./globals","loc":{"line":15,"column":24,"index":524},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/globals.js"},{"name":"./constants","loc":{"line":16,"column":26,"index":564},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/constants.js"},{"name":"./manage-subscribers","loc":{"line":17,"column":35,"index":615},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/manage-subscribers.js"},{"name":"./socket-io","loc":{"line":18,"column":26,"index":666},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/socket-io.js"},{"name":"./heartbeat","loc":{"line":19,"column":26,"index":708},"parent":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/heartbeat.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attachSharedListeners = void 0;\nvar globals_1 = require(\"./globals\");\nvar constants_1 = require(\"./constants\");\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\nvar socket_io_1 = require(\"./socket-io\");\nvar heartbeat_1 = require(\"./heartbeat\");\nvar bindMessageHandler = function (webSocketInstance, url, heartbeatOptions) {\n    webSocketInstance.onmessage = function (message) {\n        (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n            var _a;\n            if (subscriber.optionsRef.current.onMessage) {\n                subscriber.optionsRef.current.onMessage(message);\n            }\n            if (typeof ((_a = subscriber === null || subscriber === void 0 ? void 0 : subscriber.lastMessageTime) === null || _a === void 0 ? void 0 : _a.current) === 'number') {\n                subscriber.lastMessageTime.current = Date.now();\n            }\n            if (typeof subscriber.optionsRef.current.filter === 'function' &&\n                subscriber.optionsRef.current.filter(message) !== true) {\n                return;\n            }\n            if (heartbeatOptions &&\n                typeof heartbeatOptions !== \"boolean\" &&\n                (heartbeatOptions === null || heartbeatOptions === void 0 ? void 0 : heartbeatOptions.returnMessage) === message.data)\n                return;\n            subscriber.setLastMessage(message);\n        });\n    };\n};\nvar bindOpenHandler = function (webSocketInstance, url, heartbeatOptions) {\n    webSocketInstance.onopen = function (event) {\n        (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n            subscriber.reconnectCount.current = 0;\n            if (subscriber.optionsRef.current.onOpen) {\n                subscriber.optionsRef.current.onOpen(event);\n            }\n            subscriber.setReadyState(constants_1.ReadyState.OPEN);\n            var onMessageCb;\n            if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n                subscriber.lastMessageTime.current = Date.now();\n                (0, heartbeat_1.heartbeat)(webSocketInstance, subscriber.lastMessageTime, typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions);\n            }\n        });\n    };\n};\nvar bindCloseHandler = function (webSocketInstance, url) {\n    if (webSocketInstance instanceof WebSocket) {\n        webSocketInstance.onclose = function (event) {\n            (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n                if (subscriber.optionsRef.current.onClose) {\n                    subscriber.optionsRef.current.onClose(event);\n                }\n                subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n            });\n            delete globals_1.sharedWebSockets[url];\n            (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n                var _a;\n                if (subscriber.optionsRef.current.shouldReconnect &&\n                    subscriber.optionsRef.current.shouldReconnect(event)) {\n                    var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n                    if (subscriber.reconnectCount.current < reconnectAttempts) {\n                        var nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ?\n                            subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) :\n                            subscriber.optionsRef.current.reconnectInterval;\n                        setTimeout(function () {\n                            subscriber.reconnectCount.current++;\n                            subscriber.reconnect.current();\n                        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n                    }\n                    else {\n                        subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n                        console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n                    }\n                }\n            });\n        };\n    }\n};\nvar bindErrorHandler = function (webSocketInstance, url) {\n    webSocketInstance.onerror = function (error) {\n        (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n            if (subscriber.optionsRef.current.onError) {\n                subscriber.optionsRef.current.onError(error);\n            }\n            if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n                subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), { code: 1006, reason: \"An error occurred with the EventSource: \".concat(error), wasClean: false }));\n                subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n            }\n        });\n        if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n            webSocketInstance.close();\n        }\n    };\n};\nvar attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n    var interval;\n    if (optionsRef.current.fromSocketIO) {\n        interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n    }\n    bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n    bindCloseHandler(webSocketInstance, url);\n    bindOpenHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n    bindErrorHandler(webSocketInstance, url);\n    return function () {\n        if (interval)\n            clearInterval(interval);\n    };\n};\nexports.attachSharedListeners = attachSharedListeners;\n"},"sourceMaps":{"js":{"version":3,"file":"attach-shared-listeners.js","sourceRoot":"","sources":["../../src/lib/attach-shared-listeners.ts"],"names":[],"mappings":"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","sourcesContent":["import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { HeartbeatOptions, Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (typeof subscriber?.lastMessageTime?.current === 'number') {\n        subscriber.lastMessageTime.current = Date.now();\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      if (\n        heartbeatOptions &&\n        typeof heartbeatOptions !== \"boolean\" &&\n        heartbeatOptions?.returnMessage === message.data\n      )\n        return;\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n\n      let onMessageCb: () => void;\n\n      if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n        subscriber.lastMessageTime.current = Date.now();\n        heartbeat(webSocketInstance, subscriber.lastMessageTime, typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions,);\n      }\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n\n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n\n      delete sharedWebSockets[url];\n\n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            const nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ?\n              subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) :\n              subscriber.optionsRef.current.reconnectInterval;\n\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n\n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n"]}},"error":null,"hash":"5d434d063323d9296cf88b60db349414","cacheData":{"env":{}}}