{"id":"node_modules/react-use-websocket/dist/lib/globals.js","dependencies":[{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/dist/lib/globals.js.map","includedInParent":true,"mtime":1732535186174},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/src/lib/globals.ts","includedInParent":true,"mtime":1732535186178},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/package.json","includedInParent":true,"mtime":1732535186185},{"name":"/Users/h/Developer/go-by-example/omcb/frontend/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1732535186173}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resetWebSockets = exports.sharedWebSockets = void 0;\nexports.sharedWebSockets = {};\nvar resetWebSockets = function (url) {\n    if (url && exports.sharedWebSockets.hasOwnProperty(url)) {\n        delete exports.sharedWebSockets[url];\n    }\n    else {\n        for (var url_1 in exports.sharedWebSockets) {\n            if (exports.sharedWebSockets.hasOwnProperty(url_1)) {\n                delete exports.sharedWebSockets[url_1];\n            }\n        }\n    }\n};\nexports.resetWebSockets = resetWebSockets;\n"},"sourceMaps":{"js":{"version":3,"file":"globals.js","sourceRoot":"","sources":["../../src/lib/globals.ts"],"names":[],"mappings":";;;AAMa,QAAA,gBAAgB,GAAqB,EAAE,CAAC;AAE9C,IAAM,eAAe,GAAG,UAAC,GAAY;IAC1C,IAAI,GAAG,IAAI,wBAAgB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;QAChD,OAAO,wBAAgB,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;SAAM,CAAC;QACN,KAAK,IAAI,KAAG,IAAI,wBAAgB,EAAC,CAAC;YAChC,IAAI,wBAAgB,CAAC,cAAc,CAAC,KAAG,CAAC,EAAC,CAAC;gBACxC,OAAO,wBAAgB,CAAC,KAAG,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC,CAAA;AAVY,QAAA,eAAe,mBAU3B","sourcesContent":["import { WebSocketLike } from \"./types\";\n\nexport interface SharedWebSockets {\n  [url: string]: WebSocketLike;\n}\n\nexport const sharedWebSockets: SharedWebSockets = {};\n\nexport const resetWebSockets = (url?: string): void => {\n  if (url && sharedWebSockets.hasOwnProperty(url)) {\n    delete sharedWebSockets[url];\n  } else {\n    for (let url in sharedWebSockets){\n      if (sharedWebSockets.hasOwnProperty(url)){\n        delete sharedWebSockets[url];\n      }\n    }\n  }\n}\n"]}},"error":null,"hash":"db33810db122b97a3c9a367f44484891","cacheData":{"env":{}}}